http://www.pythondoc.com/



1.django 中地址匹配问题,默认会根据正则匹配，在地址结尾加$,防止正则匹配
如配置test 与test1, 请求test1时会匹配test,导致进不去test1,只要配置test$,则调用test1时不再匹配到test
1.1单例问题

2.  rest_framework生成swagger页面的时候的时候，因为以下配置了permission_classes = [因此使用IsAuthenticated]，导致进入
swagger页面显示了No operations defined in spec!

  # 此处涉及最终展示页面权限问题，如果不需要认证，则使用AllowAny，这里需要权限认证，因此使用IsAuthenticated
    permission_classes = [AllowAny]
 （https://q1mi.github.io/Django-REST-framework-documentation/ 中文文档）



3.rest_framework_swagger 库在19年已不维护了，前期搭建的时候用了 现在需要更换成新的库
drf-yasg库 但只支持swagger2.0，官方文档提示drf-spectacular能支持swagger3.0
对应资料https://cloud.tencent.com/developer/article/1576613

4.drf-spectacular能支持swagger3.0
对应文档https://drf-spectacular.readthedocs.io/en/latest/settings.html


5.思考数据库插入简化逻辑
方案一：自写通用模块，传入字典，组装成insert语句，再增加一个存放对应表字段的全局字典，使用深拷贝提供其他使用
问题：需要逐个表手写字典 繁琐，但能直接使用现在数据库连接

方案二：django的models，在setting设置多个数据库连接
使用自带models,还能直接从数据库反向生成models类
python manage.py inspectdb --database twms ods_pck_info ods_pck_detail ods_pck_attached ods_pck_haikwan_detail  > wmspda/models.py
但数据库操作不够直观与方便

方案三：寻找其他ORM模式，
 SQLAlchemy最多人用的， https://blog.csdn.net/u013190417/article/details/122402879
FLASK SQLAlchemy  对flask中针对SQLAlchemy进行优化的


SQLAlchemy 反向生成model类
sqlacodegen  mysql+pymysql://wsp_test:wsp_test@mysql-test.banggood.cn:3307/wsp --outfile ./modular/wspDB/model.py --table global_order_operate,ods_pck_info,ods_pck_detail,ods_pck_attached,ods_pck_haikwan_detail,package_info,package_item


sqlacodegen  mysql+pymysql://twms:twms#321@192.168.1.203:13306/twms --outfile ./modular/wmsDB/model.py --table ods_pck_info,ods_pck_detail,ods_pck_attached,ods_pck_haikwan_detail